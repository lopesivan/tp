#include <stdio.h>
#include <malloc.h>
#include <string.h>

#define N 4
#define M 3

void
print_matrix ( int **matrix,
               unsigned int rows,
               unsigned int columns
)
{

    unsigned int i,
                 j;

    puts("");
    puts("function: matrix_print");

    for (i=0; i<rows; i++)
    {

        for (j=0; j<columns; j++)
        {
            printf("%s%u%s%d%s%d", "matrix[",i,"][",j,"] = ",matrix[i][j]);

            if ( j < columns -1)
                printf("%s", "; ");
        }

        printf("%s", "\n");
    }

    return;

}

void
set_matrix ( int **matrix)
{
    puts("function: set_matrix");

    matrix[0][0] = 0;
    matrix[0][1] = 4;
    matrix[0][2] = 8;
    matrix[1][0] = 1;
    matrix[1][1] = 5;
    matrix[1][2] = 9;
    matrix[2][0] = 2;
    matrix[2][1] = 6;
    matrix[2][2] = 10;
    matrix[3][0] = 3;
    matrix[3][1] = 7;
    matrix[3][2] = 11;

    return;

}

int main(void)
{
    unsigned int rows,
    columns,
    i;

    int **matriz;

    rows    = N;
    columns = M;

    matriz = (int **) malloc( rows * sizeof( int *) );

    for (i=0; i<rows; i++)
        matriz[i] = (int *) malloc( columns * sizeof( int ) );

    set_matrix(matriz);

    /*
        for (i=0; i<rows; i++)
    	{

        	for (j=0; j<columns; j++)
    		{
    			printf("%s%u%s%d%s%d", "matriz[",i,"][",j,"] = ",matriz[i][j]);

    			if ( j < columns -1)
    				printf("%s", "; ");
    		}
    		printf("%s", "\n");
    	}
    */

    print_matrix(matriz, rows, columns);

    for (i=0; i<rows; i++)
    {
        memset(matriz[i], 0, columns*sizeof(int) );
        free(matriz[i]);
    }

    memset(matriz, 0, rows*sizeof(int*) );

    free(matriz);

    return 0;
}
