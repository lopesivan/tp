#include <stdio.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>

#include "matrix.h"

Matrix
zeros (Row rows, Column columns)
{

	Matrix  matrix = new_matrix (rows, columns);

	zero (*matrix, rows * columns);

	return matrix;

}

void
print_matrix (Matrix matrix, Row rows, Column columns)
{

	unsigned int i,
				 factor = 0;

	for (i = 0; i < (rows * columns); i++) {

		printf ("[" PRINTF_SCALAR "]", *(&matrix[0][0] + i));

		if (i == (columns - 1) + factor) {

			factor += columns;

			printf ("\n");
		}
	}

	return;

}

void
matrix_zero (Matrix matrix, Row rows, Column columns)
{

	zero (*matrix, rows * columns);

	return;

}

void
matrix_one (Matrix matrix, Row rows, Column columns)
{

	one (*matrix, rows * columns);

	return;

}

void
matrix_two (Matrix matrix, Row rows, Column columns)
{

	two (*matrix, rows * columns);

	return;

}

void
matrix_three (Matrix matrix, Row rows, Column columns)
{

	three (*matrix, rows * columns);

	return;

}

void
matrix_grand (Matrix matrix, Row rows, Column columns)
{

	grand (*matrix, rows * columns);

	return;

}

void
_delete_matrix (Matrix matrix, Row rows, Column columns, void (free_ptr)(void *))
{
    delete_array(matrix[0], rows * columns);
	return;
}

/*****************************************************************************
 | m                                                                         |
 |  NxM                                                                      |
 |                                                                           |
 | **m -> *m[0] -> m[0][0]--m[0][1]--   ..  --m[0][M]--,                     |
 |           |     .__________________________________/                      |
 |           |     |                                                         |
 |           |     v                                                         |
 |        *m[1] -> m[1][0]--m[1][1]--   ..  --m[1][M]--,                     |
 |           |     .__________________________________/                      |
 |           |     |                                                         |
 |           |     v                                                         |
 |        *m[2] -> m[2][0]--m[2][1]--   ..  --m[2][M]--,                     |
 |           |     .__________________________________/                      |
 |           |     |                                                         |
 |           |     v                                                         |
 |        *m[3] -> m[3][0]--m[3][1]--   ..  --m[3][M]--,                     |
 |           |     .__________________________________/                      |
 |           |     |                                                         |
 |           |     v                                                         |
 |          ...   ...             ...                                        |
 |           |     .__________________________________/                      |
 |           |     |                                                         |
 |           |     v                                                         |
 |        *m[N] -> m[N][0]--m[N][1]--   ..  --m[N][M]                        |
 |                                                                           |
 *****************************************************************************/

Matrix
_new_matrix (Row rows, Column columns, void *(malloc_ptr)(size_t size))
{

	unsigned int i;

	Matrix  matrix;

/* ///////////////////////////////////////////////////////////////////////// */
/* ---------------------- allocate pointers to rows -----------------------  */
/* ///////////////////////////////////////////////////////////////////////// */

	matrix = (Matrix) malloc_ptr ((size_t) ((rows) * sizeof (Array)));

	if (!matrix) {

/* ///////////////////////////////////////////////////////////////////////// */
/* ------ Memory could not be allocated, so print an error and exit. ------  */
/* ///////////////////////////////////////////////////////////////////////// */

		fatal_error ("Couldn't allocate memory");

		exit (1);

	}

/* ///////////////////////////////////////////////////////////////////////// */
/* ---------------- allocate rows and set pointers to them ----------------  */
/* ///////////////////////////////////////////////////////////////////////// */

	matrix[0] = new_array (rows * columns);

	if (!matrix[0]) {

/* ///////////////////////////////////////////////////////////////////////// */
/* ------ Memory could not be allocated, so print an error and exit. ------  */
/* ///////////////////////////////////////////////////////////////////////// */

		fatal_error ("Couldn't allocate memory");

		exit (2);

	}

	for (i = 1; i < rows; i++)
		matrix[i] = matrix[i - 1] + columns;

	matrix_zero(matrix, rows, columns);

	return matrix;

}
