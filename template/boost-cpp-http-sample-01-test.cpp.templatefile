/*
    Boost.Asio - Simple http server
    Boost version: 1.55.0

    Compile: g++ test.cpp -o test -lboost_system -lpthread -lboost_thread && ./test
*/

#include <iostream>
#include <string>
#include <boost/bind.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>
#include <boost/asio.hpp>

#ifndef HTTP_SERVER_H
#define HTTP_SERVER_H
namespace http {
    boost::asio::io_service io;
    boost::asio::ip::tcp::acceptor acceptor(io);
    boost::asio::ip::tcp::resolver resolver(io);

    class Server: public boost::enable_shared_from_this<Server> {
        private:
            boost::asio::streambuf buffer;
            std::ostringstream ss;
            std::string res, req;

        public:
            boost::asio::ip::tcp::socket socket;

            Server(boost::asio::io_service &io):socket(io) {};
            static void connect();
            void writeHandler(const boost::system::error_code &err, std::size_t bytes);
            void readHeader(boost::system::error_code const &err, size_t bytes);
            void acceptHandler(const boost::system::error_code &err);
    };

    void Server::connect() {
        boost::shared_ptr<Server> conn(new Server(io));
        acceptor.async_accept(conn->socket,
                boost::bind(&Server::acceptHandler, conn, boost::asio::placeholders::error));
    };

    void Server::writeHandler(const boost::system::error_code &err, std::size_t bytes) {
        socket.close();
        connect();
    };

    void Server::acceptHandler(const boost::system::error_code &err) {
        boost::asio::async_read_until(socket, buffer, "\r\n\r\n",
            boost::bind(&Server::readHeader, shared_from_this(), 
                boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
    };

    void Server::readHeader(boost::system::error_code const &err, size_t bytes) {
        ss << &buffer;
        req = ss.str();
        std::cout << req << std::endl;
    
        res = "HTTP/1.1 200 OK\r\nContent-Length: 13\r\n\r\nHello, world!";

        boost::asio::async_write(socket, boost::asio::buffer(res),
            boost::asio::transfer_all(), boost::bind(&Server::writeHandler, shared_from_this(),
                boost::asio::placeholders::error, boost::asio::placeholders::bytes_transferred));
    };

    void listen(std::string address, std::string port) {
        std::cout << "Listening..." << std::endl;
        boost::asio::ip::tcp::resolver::query query(address, port);
        boost::asio::ip::tcp::endpoint endpoint = *resolver.resolve(query);

        acceptor.open(endpoint.protocol());
        acceptor.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));
        acceptor.bind(endpoint);
        acceptor.listen();
        Server::connect();

        io.run();
    };
};
#endif

int main() {
    http::listen("www.test.com.br", "80");

    return 0;
};